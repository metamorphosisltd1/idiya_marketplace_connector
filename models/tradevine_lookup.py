# -*- coding: utf-8 -*-
# Part of Odoo. See LICENSE file for full copyright and licensing details.


# lookup values of the tradevine

def get_user_status(lookup_value):
    user_status = {
        1000: 'Pending',
        1001: 'Approved',
        1002: 'Inactive'
    }
    return user_status[lookup_value]

def get_permission_name(lookup_value):
    permission_name = {
        2000: 'Pending',
        2001: 'Approved',
        2100: 'Inactive',
        2101: 'Dashboard Sales Metrics',
        2102: 'Dashboard Purchase Metrics',
        2103: 'Dashboard Product Metrics',
        2104: 'Dashboard Project View',
        2200: 'Sales Ribbon',
        2201: 'Sales Quotes',
        2202: 'Sales Orders',
        2203: 'Sales Shipments',
        2206: 'Customers',
        2300: 'Purchases Ribbon',
        2301: 'Purchase RFQs',
        2302: 'Purchase Orders',
        2303: 'Purchase Inwards Goods',
        2306: 'Suppliers',
        2307: 'Purchase Quotes',
        2400: 'Products Ribbon',
        2401: 'Products',
        2402: 'Inventory',
        2404: 'Product Metrics',
        2600: 'Settings Ribbon',
        2601: 'Organisation Details',
        2602: 'Organisation Settings',
        2603: 'Details Maintain Users',
        2604: 'Settings Maintain Accounting',
    }
    return permission_name[lookup_value]

def get_order_origin(lookup_value=None):
    order_origin = {
        3000: 'Manual',
        3003: 'Trade Me',
        3004: 'Shopify'
    }
    if lookup_value:
        return order_origin[lookup_value]
    return order_origin

def get_terms_of_trade(lookup_value):
    terms_of_trade = {
        4000: 'Immediate',
        4001: 'Cash',
        4002: '7 days',
        4003: '20th of month following invoice',
        4004: '14 days',
        4005: '21 days',
        4006: '28 days',
        4007: '30 days',
        4008: '60 days',
        4009: '90 days',
    }
    return terms_of_trade[lookup_value]

def get_number_of_employees(lookup_value):
    number_of_employees = {
        5000: '1 to 4',
        5001: '5 to 19',
        5002: '20 - 99',
        5003: '100 - 499',
        5004: '500+',
    }
    return number_of_employees[lookup_value]

def get_sector(lookup_value):
    sector = {
        6000: 'Accommodation',
        6001: 'Agriculture',
        6002: 'Beauty and Personal Services',
        6003: 'Building',
        6004: 'Business and Professional Services',
        6005: 'Computers/Software/IT',
        6006: 'Construction',
        6007: 'Creative Arts and Design',
        6008: 'Domestic and Facility Services',
        6009: 'Education and Training',
        6010: 'Engineerings',
        6011: 'Entertainment',
        6012: 'Fishing and Aquaculture',
        6013: 'Food and Beverage Manufacturing',
        6014: 'Forestry, Logging and Mining',
        6015: 'Health',
        6016: 'Horticulture and Landscaping',
        6017: 'Hospitality and Food Services',
        6018: 'Manufacturing',
        6019: 'Print, Publishing and Media Services',
        6020: 'Property and Real Estate',
        6021: 'Retail',
        6022: 'Science and Research',
        6023: 'Service Provider',
        6024: 'Social and Community Services',
        6025: 'Sport, Fitness and Recreation',
        6026: 'Transport',
        6027: 'Travel and Tourism',
        6028: 'Wholesale',
    }
    return sector[lookup_value]

def get_title(lookup_value):
    title = {
        7000: 'Mrs',
        7001: 'Ms',
        7002: 'Mr',
        7003: 'Dr',
        7004: 'Master',
        7005: 'Miss',
        7006: 'Sir',
        7007: 'Lady',
        7008: 'Dame',
        7009: 'His Worship',
        7010: 'Her Worship',
        7011: 'Sister',
        7012: 'Reverend',
        7013: 'Friar',
        7014: 'Father',
        7015: 'Bishop',
        7016: 'Pastor',
        7017: 'Professor',
        7018: 'Brother',
        7019: 'Matua',
        7020: 'Judge',
        7021: 'Monsignor',
    }
    return title[lookup_value]

def get_country(lookup_value=None):
    country = {
        8000: 'Afghanistan',
        8002: 'Aland Islands',
        8003: 'Albania',
        8004: 'Algeria',
        8005: 'American Samoa',
        8006: 'Andorra',
        8007: 'Angola',
        8008: 'Anguilla',
        8009: 'Antarctica',
        8010: 'Antigua and Barbuda',
        8011: 'Argentina',
        8012: 'Armenia',
        8013: 'Aruba',
        8014: 'Australia',
        8015: 'Austria',
        8016: 'Azerbaijan',
        8017: 'Bahamas',
        8018: 'Bahrain',
        8019: 'Bangladesh',
        8020: 'Barbados',
        8021: 'Belarus',
        8022: 'Belgium',
        8023: 'Belize',
        8024: 'Benin',
        8025: 'Bermuda',
        8026: 'Bhutan',
        8027: 'Bolivia',
        8028: 'Bosnia and Herzegovina',
        8029: 'Botswana',
        8030: 'Bouvet Island',
        8031: 'Brazil',
        8032: 'British Indian Ocean Territory',
        8033: 'British Virgin Islands',
        8034: 'Brunei',
        8035: 'Bulgaria',
        8036: 'Burkina Faso',
        8037: 'Burundi',
        8038: 'Cambodia',
        8039: 'Cameroon',
        8040: 'Canada',
        8041: 'Cape Verde',
        8042: 'Cayman Islands',
        8043: 'Central African Republic',
        8044: 'Chad',
        8045: 'Chile',
        8046: 'China',
        8047: 'Christmas Island',
        8048: 'Cocos Islands',
        8049: 'Colombia',
        8050: 'Comoros',
        8051: 'Congo - Brazzaville',
        8052: 'Congo - Kinshasa',
        8053: 'Cook Islands',
        8054: 'Costa Rica',
        8055: 'Croatia',
        8056: 'Cuba',
        8057: 'Cyprus',
        8058: 'Czech Republic',
        8059: 'Denmark',
        8060: 'Djibouti',
        8061: 'Dominica',
        8062: 'Dominican Republic',
        8063: 'East Timor',
        8064: 'Ecuador',
        8065: 'Egypt',
        8066: 'El Salvador',
        8067: 'Equatorial Guinea',
        8068: 'Eritrea',
        8069: 'Estonia',
        8070: 'Ethiopia',
        8071: 'Falkland Islands',
        8072: 'Faroe Islands',
        8073: 'Fiji',
        8074: 'Finland',
        8075: 'France',
        8076: 'French Guiana',
        8077: 'French Polynesia',
        8078: 'French Southern Territories',
        8079: 'Gabon',
        8080: 'Gambia',
        8081: 'Georgia',
        8082: 'Germany',
        8083: 'Ghana',
        8084: 'Gibraltar',
        8085: 'Greece',
        8086: 'Greenland',
        8087: 'Grenada',
        8088: 'Guadeloupe',
        8089: 'Guam',
        8090: 'Guatemala',
        8091: 'Guernsey',
        8092: 'Guinea',
        8093: 'Guinea-Bissau',
        8094: 'Guyana',
        8095: 'Haiti',
        8096: 'Heard Island and McDonald Islands',
        8097: 'Honduras',
        8098: 'Hong Kong',
        8099: 'Hungary',
        8100: 'Iceland',
        8101: 'India',
        8102: 'Indonesia',
        8103: 'Iran',
        8104: 'Iraq',
        8105: 'Ireland',
        8106: 'Isle of Man',
        8107: 'Israel',
        8108: 'Italy',
        8109: 'Ivory Coast',
        8110: 'Jamaica',
        8111: 'Japan',
        8112: 'Jersey',
        8113: 'Jordan',
        8114: 'Kazakhstan',
        8115: 'Kenya',
        8116: 'Kiribati',
        8117: 'Kuwait',
        8118: 'Kyrgyzstan',
        8119: 'Laos',
        8120: 'Latvia',
        8121: 'Lebanon',
        8122: 'Lesotho',
        8123: 'Liberia',
        8124: 'Libya',
        8125: 'Liechtenstein',
        8126: 'Lithuania',
        8127: 'Luxembourg',
        8128: 'Macao',
        8129: 'Macedonia',
        8130: 'Madagascar',
        8131: 'Malawi',
        8132: 'Malaysia',
        8133: 'Maldives',
        8134: 'Mali',
        8135: 'Malta',
        8136: 'Marshall Islands',
        8137: 'Martinique',
        8138: 'Mauritania',
        8139: 'Mauritius',
        8140: 'Mayotte',
        8141: 'Mexico',
        8142: 'Micronesia',
        8143: 'Moldova',
        8144: 'Monaco',
        8145: 'Mongolia',
        8146: 'Montenegro',
        8147: 'Montserrat',
        8148: 'Morocco',
        8149: 'Mozambique',
        8150: 'Myanmar',
        8151: 'Namibia',
        8152: 'Nauru',
        8153: 'Nepal',
        8154: 'Netherlands',
        8155: 'Netherlands Antilles',
        8156: 'New Caledonia',
        8157: 'New Zealand',
        8158: 'Nicaragua',
        8159: 'Niger',
        8160: 'Nigeria',
        8161: 'Niue',
        8162: 'Norfolk Island',
        8163: 'North Korea',
        8164: 'Northern Mariana Islands',
        8165: 'Norway',
        8166: 'Oman',
        8167: 'Pakistan',
        8168: 'Palau',
        8169: 'Palestinian Territory',
        8170: 'Panama',
        8171: 'Papua New Guinea',
        8172: 'Paraguay',
        8173: 'Peru',
        8174: 'Philippines',
        8175: 'Pitcairn',
        8176: 'Poland',
        8177: 'Portugal',
        8178: 'Puerto Rico',
        8179: 'Qatar',
        8180: 'Reunion',
        8181: 'Romania',
        8182: 'Russia',
        8183: 'Rwanda',
        8184: 'Saint Barth√©lemy',
        8185: 'Saint Helena',
        8186: 'Saint Kitts and Nevis',
        8187: 'Saint Lucia',
        8188: 'Saint Martin',
        8189: 'Saint Pierre and Miquelon',
        8190: 'Saint Vincent and the Grenadines',
        8191: 'Samoa',
        8192: 'San Marino',
        8193: 'Sao Tome and Principe',
        8194: 'Saudi Arabia',
        8195: 'Senegal',
        8196: 'Serbia',
        8197: 'Serbia and Montenegro',
        8198: 'Seychelles',
        8199: 'Sierra Leone',
        8200: 'Singapore',
        8201: 'Slovakia',
        8202: 'Slovenia',
        8203: 'Solomon Islands',
        8204: 'Somalia',
        8205: 'South Africa',
        8206: 'South Georgia and the South Sandwich Islands',
        8207: 'South Korea',
        8208: 'Spain',
        8209: 'Sri Lanka',
        8210: 'Sudan',
        8211: 'Suriname',
        8212: 'Svalbard and Jan Mayen',
        8213: 'Swaziland',
        8214: 'Sweden',
        8215: 'Switzerland',
        8216: 'Syria',
        8217: 'Taiwan',
        8218: 'Tajikistan',
        8219: 'Tanzania',
        8220: 'Thailand',
        8221: 'Togo',
        8222: 'Tokelau',
        8223: 'Tonga',
        8224: 'Trinidad and Tobago',
        8225: 'Tunisia',
        8226: 'Turkey',
        8227: 'Turkmenistan',
        8228: 'Turks and Caicos Islands',
        8229: 'Tuvalu',
        8230: 'U.S. Virgin Islands',
        8231: 'Uganda',
        8232: 'Ukraine',
        8233: 'United Arab Emirates',
        8234: 'United Kingdom',
        8235: 'United States',
        8236: 'United States Minor Outlying Islands',
        8237: 'Uruguay',
        8238: 'Uzbekistan',
        8239: 'Vanuatu',
        8240: 'Vatican',
        8241: 'Venezuela',
        8242: 'Vietnam',
        8243: 'Wallis and Futuna',
        8244: 'Western Sahara',
        8245: 'Yemen',
        8246: 'Zambia',
        8247: 'Zimbabwe',

    }
    if lookup_value:
        return country[lookup_value]
    return country

def get_international_calling_codes(lookup_value):
    international_calling_codes = {
        9000: '+93',
        9001: '+35',
        9002: '+21',
        9003: '+16',
        9004: '+37',
        9005: '+24',
        9006: '+12',
        9007: '+67',
        9008: '+12',
        9009: '+54',
        9010: '+37',
        9011: '+29',
        9012: '+24',
        9013: '+61',
        9014: '+43',
        9015: '+99',
        9016: '+12',
        9017: '+97',
        9018: '+88',
        9019: '+12',
        9020: '+37',
        9021: '+32',
        9022: '+50',
        9023: '+22',
        9024: '+14',
        9025: '+97',
        9026: '+59',
        9027: '+38',
        9028: '+26',
        9029: '+55',
        9030: '+12',
        9031: '+67',
        9032: '+35',
        9033: '+22',
        9034: '+25',
        9035: '+85',
        9036: '+23',
        9037: '+1',
        9038: '+23',
        9039: '+13',
        9040: '+23',
        9041: '+23',
        9042: '+64',
        9043: '+56',
        9044: '+86',
        9045: '+53',
        9046: '+57',
        9047: '+26',
        9048: '+24',
        9049: '+24',
        9050: '+68',
        9051: '+50',
        9052: '+22',
        9053: '+38',
        9054: '+53',
        9055: '+59',
        9056: '+35',
        9057: '+42',
        9058: '+45',
        9059: '+24',
        9060: '+25',
        9061: '+17',
        9062: '+18',
        9063: '+18',
        9064: '+67',
        9065: '+59',
        9066: '+20',
        9067: '+50',
        9068: '+24',
        9069: '+29',
        9070: '+37',
        9071: '+25',
        9072: '+50',
        9073: '+29',
        9074: '+67',
        9075: '+35',
        9076: '+33',
        9077: '+59',
        9078: '+59',
        9079: '+68',
        9080: '+24',
        9081: '+22',
        9082: '+99',
        9083: '+49',
        9084: '+23',
        9085: '+35',
        9086: '+30',
        9087: '+29',
        9088: '+14',
        9089: '+59',
        9090: '+16',
        9091: '+50',
        9092: '+24',
        9093: '+22',
        9094: '+59',
        9095: '+50',
        9096: '+50',
        9097: '+85',
        9098: '+36',
        9099: '+35',
        9100: '+91',
        9101: '+62',
        9102: '+98',
        9103: '+96',
        9104: '+35',
        9105: '+97',
        9106: '+39',
        9107: '+18',
        9108: '+81',
        9109: '+96',
        9110: '+7',
        9111: '+25',
        9112: '+68',
        9113: '+85',
        9114: '+82',
        9115: '+96',
        9116: '+99',
        9117: '+85',
        9118: '+37',
        9119: '+96',
        9120: '+26',
        9121: '+23',
        9122: '+21',
        9123: '+42',
        9124: '+37',
        9125: '+35',
        9126: '+85',
        9127: '+38',
        9128: '+26',
        9129: '+26',
        9130: '+60',
        9131: '+96',
        9132: '+22',
        9133: '+35',
        9134: '+69',
        9135: '+22',
        9136: '+23',
        9137: '+52',
        9138: '+69',
        9139: '+18',
        9140: '+37',
        9141: '+37',
        9142: '+97',
        9143: '+38',
        9144: '+16',
        9145: '+21',
        9146: '+25',
        9147: '+95',
        9148: '+26',
        9149: '+67',
        9150: '+97',
        9151: '+31',
        9152: '+18',
        9153: '+68',
        9154: '+50',
        9155: '+22',
        9156: '+23',
        9157: '+68',
        9158: '+16',
        9159: '+47',
        9160: '+96',
        9161: '+92',
        9162: '+68',
        9163: '+97',
        9164: '+50',
        9165: '+67',
        9166: '+59',
        9167: '+51',
        9168: '+63',
        9169: '+48',
        9170: '+35',
        9171: '+17',
        9172: '+19',
        9173: '+97',
        9174: '+26',
        9175: '+40',
        9176: '+25',
        9177: '+29',
        9178: '+17',
        9179: '+50',
        9180: '+17',
        9181: '+68',
        9182: '+37',
        9183: '+23',
        9184: '+96',
        9185: '+22',
        9186: '+38',
        9187: '+24',
        9188: '+23',
        9189: '+65',
        9190: '+42',
        9191: '+38',
        9192: '+67',
        9193: '+25',
        9194: '+27',
        9195: '+34',
        9196: '+94',
        9197: '+24',
        9198: '+59',
        9199: '+26',
        9200: '+46',
        9201: '+41',
        9202: '+96',
        9203: '+88',
        9204: '+99',
        9205: '+25',
        9206: '+66',
        9207: '+22',
        9208: '+69',
        9209: '+67',
        9210: '+18',
        9211: '+21',
        9212: '+90',
        9213: '+99',
        9214: '+16',
        9215: '+68',
        9216: '+25',
        9217: '+38',
        9218: '+97',
        9219: '+44',
        9220: '+13',
        9221: '+59',
        9222: '+99',
        9223: '+67',
        9224: '+37',
        9225: '+58',
        9226: '+84',
        9227: '+80',
        9228: '+68',
        9229: '+96',
        9230: '+26',
        9231: '+26',
        9230: '+26',
        9231: '+26',
    }
    return international_calling_codes[lookup_value]

def get_currency(key=None, value=None):
    currency = {
        10000: 'AED',
        10001: 'AFN',
        10002: 'ALL',
        10003: 'AMD',
        10004: 'ANG',
        10005: 'AOA',
        10006: 'ARS',
        10007: 'AUD',
        10008: 'AWG',
        10009: 'AZN',
        10010: 'BAM',
        10011: 'BBD',
        10012: 'BDT',
        10013: 'BGN',
        10014: 'BHD',
        10015: 'BIF',
        10016: 'BMD',
        10017: 'BND',
        10018: 'BOB',
        10019: 'BRL',
        10020: 'BSD',
        10021: 'BTN',
        10022: 'BWP',
        10023: 'BYR',
        10024: 'BZD',
        10025: 'CAD',
        10026: 'CDF',
        10027: 'CHF',
        10028: 'CLP',
        10029: 'CNY',
        10030: 'COP',
        10031: 'CRC',
        10032: 'CUP',
        10033: 'CVE',
        10034: 'CYP',
        10035: 'CZK',
        10036: 'DJF',
        10037: 'DKK',
        10038: 'DOP',
        10039: 'DZD',
        10040: 'EEK',
        10041: 'EGP',
        10042: 'ERN',
        10043: 'ETB',
        10044: 'EUR',
        10045: 'FJD',
        10046: 'FKP',
        10047: 'GBP',
        10048: 'GEL',
        10049: 'GGP',
        10050: 'GHS',
        10051: 'GIP',
        10052: 'GMD',
        10053: 'GNF',
        10054: 'GTQ',
        10055: 'GYD',
        10056: 'HKD',
        10057: 'HNL',
        10058: 'HRK',
        10059: 'HTG',
        10060: 'HUF',
        10061: 'IDR',
        10062: 'ILS',
        10063: 'IMP',
        10064: 'INR',
        10065: 'IQD',
        10066: 'IRR',
        10067: 'ISK',
        10068: 'JEP',
        10069: 'JMD',
        10070: 'JOD',
        10071: 'JPY',
        10072: 'KES',
        10073: 'KGS',
        10074: 'KHR',
        10075: 'KMF',
        10076: 'KPW',
        10077: 'KRW',
        10078: 'KWD',
        10079: 'KYD',
        10080: 'KZT',
        10081: 'LAK',
        10082: 'LBP',
        10083: 'LKR',
        10084: 'LRD',
        10085: 'LSL',
        10086: 'LTL',
        10087: 'LVL',
        10088: 'LYD',
        10089: 'MAD',
        10090: 'MDL',
        10091: 'MGA',
        10092: 'MKD',
        10093: 'MMK',
        10094: 'MNT',
        10095: 'MOP',
        10096: 'MRO',
        10097: 'MTL',
        10098: 'MUR',
        10099: 'MVR',
        10100: 'MWK',
        10101: 'MXN',
        10102: 'MYR',
        10103: 'MZN',
        10104: 'NAD',
        10105: 'NGN',
        10106: 'NIO',
        10107: 'NOK',
        10108: 'NPR',
        10109: 'NZD',
        10110: 'OMR',
        10111: 'PAB',
        10112: 'PEN',
        10113: 'PGK',
        10114: 'PHP',
        10115: 'PKR',
        10116: 'PLN',
        10117: 'PYG',
        10118: 'QAR',
        10119: 'RON',
        10120: 'RSD',
        10121: 'RUB',
        10122: 'RWF',
        10123: 'SAR',
        10124: 'SBD',
        10125: 'SCR',
        10126: 'SDG',
        10127: 'SEK',
        10128: 'SGD',
        10129: 'SHP',
        10130: 'SLL',
        10131: 'SOS',
        10132: 'SPL',
        10133: 'SRD',
        10134: 'STD',
        10135: 'SVC',
        10136: 'SYP',
        10137: 'SZL',
        10138: 'THB',
        10139: 'TJS',
        10140: 'TMM',
        10141: 'TND',
        10142: 'TOP',
        10143: 'TRY',
        10144: 'TTD',
        10145: 'TVD',
        10146: 'TWD',
        10147: 'TZS',
        10148: 'UAH',
        10149: 'UGX',
        10150: 'USD',
        10151: 'UYU',
        10152: 'UZS',
        10153: 'VEB',
        10154: 'VEF',
        10155: 'VND',
        10156: 'VUV',
        10157: 'WST',
        10158: 'XAF',
        10159: 'XAG',
        10160: 'XAU',
        10161: 'XCD',
        10162: 'XDR',
        10163: 'XOF',
        10164: 'XPD',
        10165: 'XPF',
        10166: 'XPT',
        10167: 'YER',
        10168: 'ZAR',
        10169: 'ZMK',
        10170: 'ZWD',

    }
    if key:
        return currency[key]
    if value:
        for code, name in currency.items():
            if name == value:
                return code
    return currency

def get_time_zones(lookup_value):
    time_zones = {
        11000: '(UTC-12:00) International Date Line West',
        11001: '(UTC-11:00) Samoa',
        11002: '(UTC-10:00) Hawaii',
        11003: '(UTC-09:00) Alaska',
        11004: '(UTC-08:00) Pacific Time (US & Canada)',
        11005: '(UTC-08:00) Baja California',
        11006: '(UTC-07:00) Arizona',
        11007: '(UTC-07:00) Chihuahua, La Paz, Mazatlan',
        11008: '(UTC-07:00) Mountain Time (US & Canada)',
        11009: '(UTC-06:00) Central America',
        11010: '(UTC-06:00) Central Time (US & Canada)',
        11011: '(UTC-06:00) Guadalajara, Mexico City, Monterrey',
        11012: '(UTC-06:00) Saskatchewan',
        11013: '(UTC-05:00) Bogota, Lima, Quito',
        11014: '(UTC-05:00) Eastern Time (US & Canada)',
        11015: '(UTC-05:00) Indiana (East)',
        11016: '(UTC-04:00) Asuncion',
        11017: '(UTC-04:00) Atlantic Time (Canada)',
        11018: '(UTC-04:00) Georgetown, La Paz, San Juan',
        11020: '(UTC-04:00) Santiago',
        11021: '(UTC-04:30) Caracas',
        11022: '(UTC-03:00) Brasilia',
        11023: '(UTC-03:00) Buenos Aires',
        11024: '(UTC-03:00) Cayenne, Fortaleza',
        11025: '(UTC-03:00) Greenland',
        11026: '(UTC-03:00) Montevideo',
        11027: '(UTC-03:30) Newfoundland',
        11028: '(UTC-02:00) Mid-Atlantic',
        11029: '(UTC-01:00) Azores',
        11030: '(UTC-01:00) Cape Verde Is.',
        11031: '(UTC) Casablanca',
        11032: '(UTC) Coordinated Universal Time',
        11033: '(UTC) Dublin, Edinburgh, Lisbon, London',
        11034: '(UTC) Monrovia, Reykjavik',
        11035: '(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna',
        11036: '(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague',
        11037: '(UTC+01:00) Brussels, Copenhagen, Madrid, Paris',
        11038: '(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb',
        11039: '(UTC+01:00) West Central Africa',
        11040: '(UTC+02:00) Amman',
        11041: '(UTC+02:00) Athens, Bucharest, Istanbul',
        11042: '(UTC+02:00) Beirut',
        11043: '(UTC+02:00) Cairo',
        11044: '(UTC+02:00) Harare, Pretoria',
        11045: '(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius', 
        11046: '(UTC+02:00) Jerusalem',
        11047: '(UTC+02:00) Minsk',
        11048: '(UTC+02:00) Windhoek',
        11049: '(UTC+03:00) Baghdad',
        11050: '(UTC+03:00) Kuwait, Riyadh',
        11051: '(UTC+03:00) Moscow, St. Petersburg, Volgograd',
        11052: '(UTC+03:00) Nairobi',
        11054: '(UTC+03:30) Tehran',
        11055: '(UTC+04:00) Abu Dhabi, Muscat',
        11056: '(UTC+04:00) Baku',
        11057: '(UTC+04:00) Port Louis',
        11058: '(UTC+04:00) Yerevan',
        11059: '(UTC+04:30) Kabul',
        11060: '(UTC+05:00) Ekaterinburg',
        11061: '(UTC+05:00) Islamabad, Karachi',
        11062: '(UTC+05:00) Tashkent',
        11063: '(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi',
        11064: '(UTC+05:30) Sri Jayawardenepura',
        11065: '(UTC+05:45) Kathmandu',
        11068: '(UTC+06:30) Yangon (Rangoon)',
        11069: '(UTC+07:00) Bangkok, Hanoi, Jakarta',
        11070: '(UTC+07:00) Krasnoyarsk',
        11071: '(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi',
        11072: '(UTC+08:00) Irkutsk',
        11073: '(UTC+08:00) Kuala Lumpur, Singapore',
        11074: '(UTC+08:00) Perth',
        11075: '(UTC+08:00) Taipei',
        11076: '(UTC+09:00) Osaka, Sapporo, Tokyo',
        11077: '(UTC+09:00) Seoul',
        11078: '(UTC+09:00) Yakutsk',
        11079: '(UTC+09:30) Adelaide',
        11080: '(UTC+09:30) Darwin',
        11081: '(UTC+10:00) Brisbane',
        11082: '(UTC+10:00) Canberra, Melbourne, Sydney',
        11083: '(UTC+10:00) Guam, Port Moresby',
        11084: '(UTC+10:00) Hobart',
        11085: '(UTC+10:00) Vladivostok',
        11086: '(UTC+11:00) Magadan, Solomon Is., New Caledonia',
        11087: '(UTC+12:00) Auckland, Wellington',
        11088: '(UTC+12:00) Fiji',
        11089: '(UTC+12:00) Petropavlovsk-Kamchatsky - Old',
        11090: '(UTC+13:00) Nuku alofa',
        11091: '(UTC-11:00) Coordinated Universal Time-11',
        11092: '(UTC-04:00) Cuiaba',
        11093: '(UTC-02:00) Coordinated Universal Time-02',
        11094: '(UTC+02:00) Damascus',
        11095: '(UTC+04:00) Tbilisi',
        11096: '(UTC+06:00) Astana',
        11097: '(UTC+06:00) Dhaka',
        11098: '(UTC+06:00) Novosibirsk',
        11099: '(UTC+08:00) Ulaanbaatar',
        11100: '(UTC+12:00) Coordinated Universal Time+12',
    }
    return time_zones[lookup_value]

def get_sales_order_status(lookup_value):
    sales_order_status = {
        12001: 'Pending',
        12002: 'Awaiting Shipment',
        12003: 'Completed',
        12004: 'Cancelled',
    }
    return sales_order_status[lookup_value]

def get_traffic_light(lookup_value):
    traffic_light = {
        13001: 'Red',
        13002: 'Orange',
        13003: 'Green',
        13004: 'Grey',
    }
    return traffic_light[lookup_value]

def get_pack_list_status(lookup_value):
    pack_list_status = {
        14001: 'Pending',
        14002: 'Awaiting Pack',
        14003: 'Completed',
    }
    return pack_list_status[lookup_value]

def get_alert_type(lookup_value):
    alert_type = {
        15003: 'New Purchase Order',
        15004: 'New Purchase Invoi',
        15005: 'RFQ Received - Draft Quote Created',
        15006: 'PO Received - Draft SO Created',
        15010: 'Product Inventory Low Level',
        15011: 'New Sales Order',
    }
    return alert_type[lookup_value]

def get_dashboard_metric_period(lookup_value):
    dashboard_metric_period = {
        16002: 'Daily',
        16003: 'Last 7 Days',
        16004: 'Last 30 Days',
    }
    return dashboard_metric_period[lookup_value]

def get_trade_me_listing_duration_days(lookup_value):
    trade_me_listing_duration_days = {
        17001: '2 day',
        17002: '3 day',
        17003: '4 day',
        17004: '5 day',
        17005: '6 day',
        17006: '7 day',
        17007: '10 day',
        17008: '14 day',
        17009: '21 day',
        17010: '28 day',
        17011: '30 day',
        17012: '42 day',
        17013: '56 day',
        17014: '90 day',
    }
    return trade_me_listing_duration_days[lookup_value]

def get_purchase_order_status(lookup_value):
    purchase_order_status = {
        19000: 'Draft',
        19001: 'Awaiting Receipt',
        19002: 'Completed',
    }
    return purchase_order_status[lookup_value]

def get_goods_receipt_status(lookup_value):
    goods_receipt_status = {
        20000: 'Awaiting Receipt',
        20001: 'Completed',
    }
    return goods_receipt_status[lookup_value]

def get_dashboard_metric_type(lookup_value):
    dashboard_metric_type = {
        21001: 'Sales Order Quantity',
        21002: 'Sales Order Total Value',
        21003: 'Sales Order Gross Margin',
        21004: 'Sales Order Gross Profit',
    }
    return dashboard_metric_type[lookup_value]

def get_trade_me_listing_shipping_options(lookup_value):
    trade_me_listing_shipping_options = {
        22001: 'Free Shipping within New Zealand',
        22002: 'Fixed Shipping Costs',
        22003: 'Unknown Shipping Costs',
        22004: 'Template Shipping Costs',
        22005: 'Book a Courier Shipping Costs',
    }
    return trade_me_listing_shipping_options[lookup_value]

def get_trade_me_listing_status(lookup_value):
    trade_me_listing_status = {
        24001: 'Listed',
        24002: 'UnSold',
        24003: 'Relisted',
        24004: 'Fixed Price Offer Made',
        24005: 'Payment Instructions To Send',
        24006: 'Email Sent',
        24007: 'Payment Received',
        24009: 'Goods Shipped',
        24010: 'Feedback To Place',
        24011: 'Sale Completed',
    }
    return trade_me_listing_status[lookup_value]

def get_shipping_type(lookup_value):
    shipping_type = {
        25001: 'Collection',
        25002: 'Post',
        25003: 'Courier',
        25004: 'Free Shipping',
        25005: 'Own Transport',
        25006: 'Freight',
    }
    return shipping_type[lookup_value]

def get_payment_type(lookup_value):
    payment_type = {
        26001: 'Cash',
        26002: 'Bank Transfer',
        26003: 'Credit Card',
        26004: 'Cheque',
        26005: 'Escrow',
        26006: 'Other',
        26007: 'PayPal',
        26008: 'EFTPOS',
        26009: 'Afterpay',
    }
    return payment_type[lookup_value]

def get_principal_contact_method(lookup_value):
    principal_contact_method = {
        27000: 'Fax',
        27001: 'Email',
        27002: 'Phone',
        27003: 'Mobile',
        27004: 'Post',
    }
    return principal_contact_method[lookup_value]

def get_region(lookup_value):
    region = {
        28000: 'Africa',
        28001: 'North America',
        28002: 'South America',
        28003: 'Antarctica',
        28004: 'Asia',
        28005: 'Europe',
        28006: 'Oceania',
    }
    return region[lookup_value]

def get_blob_type(lookup_value):
    blob_type = {
        30000: 'Organisation Logo',
        30001: 'Product Photo',
        30002: 'Upload File',
        30003: 'Upload Error',
        30005: 'Upload Warning',
        30006: 'Custom Shipping Label',
        30007: 'API Consumer Logo',
        30008: 'Custom Product Label',
        30009: 'Scheduled Sales Report',
        30010: 'Scheduled Shipments Report',
    }
    return blob_type[lookup_value]

def get_preferred_phone_number(lookup_value):
    preferred_phone_number = {
        31000: 'Phone',
        31001: 'Mobile',
    }
    return preferred_phone_number[lookup_value]

def get_alert_group(lookup_value):
    alert_group = {
        32001: 'Dashboard',
        32002: 'Sales',
        32003: 'Purchases',
        32004: 'Product',
        32005: 'Network',
    }
    return alert_group[lookup_value]

def get_generic_trigger_type(lookup_value):
    generic_trigger_type = {
        33000: 'Run Metric Calculation',
        33001: 'Sent Purchase RFQ',
        33002: 'Sent Purchase Order',
    }
    return generic_trigger_type[lookup_value]

def get_document_type(lookup_value):
    document_type = {
        34004: 'PurchaseOrder',
        34006: 'SalesOrder',
        34007: 'PackList',
        34012: 'ProductInventory',
        34013: 'Product',
        34014: 'Customer',
        34015: 'Supplier',
        34016: 'Goods Receipt',
    }
    return document_type[lookup_value]

def get_inventory_type(lookup_value):
    inventory_type = {
        35000: 'Automatic',
        35001: 'Manual',
    }
    return inventory_type[lookup_value]

def get_inventory_entry_type(lookup_value=None):
    inventory_entry_type = {
        36000: 'Purchase Order Adjustment (+)',
        36001: 'Sales Order Adjustment (-)',
        36002: 'Updated Quantity in Stock',
        36003: 'Import Opening Quantity in Stock',
        36004: 'Opening Quantity in Stock',
        36005: 'EOY Reconciliation',
        36007: 'Obsolete Stock (-)',
        36008: 'Breakage (-)',
        36009: 'Stocktake',
        36012: 'Sales Credit Adjustment (+)',
        36013: 'Purchase Credit Adjustment (-)',
        36014: 'Increase Stock (+)',
        36015: 'Reduce Stock (-)',
        36016: 'Transfer Stock Out (-)',
        36017: 'Transfer Stock In (+)',
        36018: 'Stocktake - Cost Replacement',
    }
    if lookup_value:
        return inventory_entry_type[lookup_value]
    return inventory_entry_type

def get_time_periods(lookup_value):
    time_periods = {
        37000: '1 month',
        37001: '3 months',
        37002: '6 months',
        37003: '1 year',
        37004: 'All',
    }
    return time_periods[lookup_value]

def get_country_codes(lookup_value):
    country_codes = {
        38000: 'AF',
        38001: 'AX',
        38002: 'AL',
        38003: 'DZ',
        38004: 'AS',
        38005: 'AD',
        38006: 'AO',
        38007: 'AI',
        38008: 'AG',
        38009: 'AR',
        38010: 'AM',
        38011: 'AW',
        38012: 'AU',
        38013: 'AT',
        38014: 'AZ',
        38015: 'BS',
        38016: 'BH',
        38017: 'BD',
        38018: 'BB',
        38019: 'BY',
        38020: 'BE',
        38021: 'BZ',
        38022: 'BJ',
        38023: 'BM',
        38024: 'BT',
        38025: 'BO',
        38026: 'BA',
        38027: 'BW',
        38028: 'BR',
        38029: 'IO',
        38030: 'BN',
        38031: 'BG',
        38032: 'BF',
        38033: 'BI',
        38034: 'KH',
        38035: 'CM',
        38036: 'CA',
        38037: 'CV',
        38038: 'KY',
        38039: 'CF',
        38040: 'TD',
        38041: 'CL',
        38042: 'CN',
        38043: 'CO',
        38044: 'CG',
        38045: 'CD',
        38046: 'CK',
        38047: 'CR',
        38048: 'CI',
        38049: 'HR',
        38050: 'CU',
        38051: 'CY',
        38052: 'CZ',
        38053: 'DK',
        38054: 'DJ',
        38055: 'DO',
        38056: 'EC',
        38057: 'EG',
        38058: 'SV',
        38059: 'GQ',
        38060: 'ER',
        38061: 'EE',
        38062: 'ET',
        38064: 'FO',
        38065: 'FJ',
        38066: 'FI',
        38067: 'FR',
        38068: 'GF',
        38069: 'PF',
        38070: 'GA',
        38071: 'GM',
        38072: 'GE',
        38073: 'DE',
        38074: 'GH',
        38075: 'GI',
        38076: 'GR',
        38077: 'GL',
        38078: 'GD',
        38079: 'GP',
        38080: 'GU',
        38081: 'GT',
        38082: 'GG',
        38083: 'GN',
        38084: 'GW',
        38085: 'GY',
        38086: 'HT',
        38087: 'VA',
        38088: 'HN',
        38089: 'HK',
        38090: 'HU',
        38091: 'IS',
        38092: 'IN',
        38093: 'ID',
        38094: 'IR',
        38095: 'IQ',
        38096: 'IE',
        38097: 'IM',
        38098: 'IL',
        38099: 'IT',
        38100: 'JM',
        38101: 'JP',
        38102: 'JE',
        38103: 'JO',
        38104: 'KZ',
        38105: 'KE',
        38106: 'KI',
        38107: 'KP',
        38108: 'KR',
        38109: 'KW',
        38110: 'KG',
        38111: 'LA',
        38112: 'LV',
        38113: 'LB',
        38114: 'LS',
        38115: 'LR',
        38116: 'LY',
        38117: 'LI',
        38118: 'LT',
        38119: 'LU',
        38120: 'MO',
        38121: 'MK',
        38122: 'MG',
        38123: 'MW',
        38124: 'MY',
        38125: 'MV',
        38126: 'ML',
        38127: 'MT',
        38128: 'MH',
        38129: 'MR',
        38130: 'MU',
        38131: 'MX',
        38132: 'FM',
        38133: 'MD',
        38134: 'MC',
        38135: 'MN',
        38136: 'ME',
        38137: 'MS',
        38138: 'MA',
        38139: 'MZ',
        38140: 'MM',
        38141: 'NA',
        38142: 'NR',
        38143: 'NP',
        38144: 'NL',
        38145: 'AN',
        38146: 'NC',
        38147: 'NZ',
        38148: 'NI',
        38149: 'NE',
        38150: 'NG',
        38151: 'NU',
        38153: 'NF',
        38154: 'MP',
        38155: 'NO',
        38156: 'OM',
        38157: 'PK',
        38158: 'PW',
        38159: 'PS',
        38160: 'PA',
        38161: 'PG',
        38162: 'PY',
        38163: 'PE',
        38164: 'PH',
        38165: 'PL',
        38166: 'PT',
        38167: 'PR',
        38168: 'QA',
        38170: 'RE',
        38171: 'RO',
        38172: 'RU',
        38173: 'RW',
        38174: 'KN',
        38175: 'LC',
        38176: 'MF',
        38177: 'VC',
        38178: 'WS',
        38179: 'SM',
        38180: 'SA',
        38181: 'SN',
        38182: 'RS',
        38183: 'CS',
        38184: 'SC',
        38185: 'SL',
        38186: 'SG',
        38187: 'SK',
        38188: 'SI',
        38189: 'SB',
        38190: 'SO',
        38191: 'ZA',
        38192: 'ES',
        38193: 'LK',
        38194: 'PM',
        38195: 'SD',
        38196: 'SR',
        38197: 'SZ',
        38198: 'SE',
        38199: 'CH',
        38200: 'SY',
        38201: 'TW',
        38202: 'TJ',
        38203: 'TZ',
        38204: 'TH',
        38205: 'TL',
        38206: 'TG',
        38207: 'TK',
        38208: 'TO',
        38209: 'TT',
        38210: 'TN',
        38211: 'TR',
        38212: 'TM',
        38213: 'TC',
        38214: 'TV',
        38215: 'UG',
        38216: 'UA',
        38217: 'AE',
        38218: 'GB',
        38219: 'US',
        38220: 'UY',
        38221: 'UZ',
        38222: 'VU',
        38223: 'VE',
        38224: 'VN',
        38225: 'VG',
        38226: 'VI',
        38227: 'WF',
        38228: 'YE',
        38229: 'ZM',
        38230: 'ZW',
    }
    return country_codes[lookup_value]

def get_label_used_for(lookup_value):
    label_used_for = {
        39000: 'Products',
        39001: 'Documents',
        39002: 'Customers',
        39003: 'Suppliers',
        39005: 'Organisations',
    }
    return label_used_for[lookup_value]

def get_validity_period(lookup_value):
    validity_period = {
        40000: '1 day',
        40001: '1 week',
        40002: '2 weeks',
        40003: '1 month',
        40004: '2 months',
        40005: '3 months',
    }
    return validity_period[lookup_value]

def get_index_counter_type(lookup_value):
    index_counter_type = {
        45000: 'Product',
        45001: 'Customer',
        45002: 'Supplier',
        45003: 'Sales Order',
        45004: 'Purchase Order',
        45005: 'Sales Return',
        45006: 'Variant Group',
    }
    return index_counter_type[lookup_value]

def get_accounting_engine(lookup_value):
    accounting_engine = {
        46000: 'Xero',
        46001: 'MYOB,',
    }
    return accounting_engine[lookup_value]

def get_barcode_type(lookup_value):
    barcode_type = {
        48002: 'UPC-A',
        48003: 'UPC-E',
        48004: 'UPC 2 Digit Ext.',
        48005: 'UPC 5 Digit Ext.',
        48006: 'EAN-13',
        48007: 'JAN-13',
        48008: 'EAN-8',
        48009: 'ITF-14',
        48010: 'Codabar',
        48011: 'PostNet',
        48012: 'Bookland/ISBN',
        48013: 'Code 11',
        48014: 'Code 39',
        48015: 'Code 39 Extended',
        48016: 'LOGMARS',
        48017: 'MSI',
        48018: 'Interleaved 2 of 5',
        48019: 'Standard 2 of 5',
        48020: 'Code 128',
        48021: 'Code 128-A',
        48022: 'Code 128-B',
        48023: 'Code 128-C',
        48024: 'Telepen',
    }
    return barcode_type[lookup_value]

def get_permission_setting(lookup_value):
    permission_setting = {
        49000: 'No access',
        49001: 'View only',
        49002: 'Draft only',
        49003: 'Approve and Send',
        49004: 'Full access',
    }
    return permission_setting[lookup_value]

def get_import_job_type(lookup_value):
    import_job_type = {
        53000: 'Products',
        53001: 'Supplier Products',
        53002: 'Customers',
        53003: 'Suppliers',
        53005: 'Products From Trade Me Active Listings',
        53007: 'Shopify Product Update',
        53008: 'Products From Shopify',
        53009: 'Sales Orders',
        53010: 'Products From Trade Me ListingID CSV File',
        53011: 'Apply Trade Me Notification Comment To Active Listings',
        53012: 'Products From Trade Me My Products',
        53013: 'Trade Me Category Moves',
        53014: 'Scheduled Sales Orders Report',
        53015: 'Scheduled Shipments Report',
    }
    return import_job_type[lookup_value]

def get_import_job_status(lookup_value):
    import_job_status = {
        54000: 'Not Started',
        54001: 'In Process',
        54002: 'Completed',
    }
    return import_job_status[lookup_value]

def get_regions_and_states(lookup_value=None):
    regions_and_states = {
        60000: 'Alabama',
        60001: 'Alaska',
        60002: 'American Samoa',
        60003: 'AA (Armed Forces Americas)',
        60004: 'AE (Armed Forces Europe)',
        60005: 'AP (Armed Forces Pacific)',
        60006: 'Arizona',
        60007: 'Arkansas',
        60008: 'California',
        60009: 'Colorado',
        60010: 'Connecticut',
        60011: 'Delaware',
        60012: 'District of Columbia',
        60013: 'Federated States of Micronesia',
        60014: 'Florida',
        60015: 'Georgia',
        60016: 'Guam',
        60017: 'Hawaii',
        60018: 'Idaho',
        60019: 'Illinois',
        60020: 'Indiana',
        60021: 'Iowa',
        60022: 'Kansas',
        60023: 'Kentucky',
        60024: 'Louisiana',
        60025: 'Maine',
        60026: 'Marshall Islands',
        60027: 'Maryland',
        60028: 'Massachusetts',
        60029: 'Michigan',
        60030: 'Minnesota',
        60031: 'Mississippi',
        60032: 'Missouri',
        60033: 'Montana',
        60034: 'Northern Mariana Islands',
        60035: 'Nebraska',
        60036: 'Nevada',
        60037: 'New Hampshire',
        60038: 'New Jersey',
        60039: 'New Mexico',
        60040: 'New York',
        60041: 'North Carolina',
        60042: 'North Dakota',
        60043: 'Ohio',
        60044: 'Oklahoma',
        60045: 'Oregon',
        60046: 'Palau',
        60047: 'Pennsylvania',
        60048: 'Puerto Rico',
        60049: 'Rhode Island',
        60050: 'South Carolina',
        60051: 'South Dakota',
        60052: 'Tennessee',
        60053: 'Texas',
        60054: 'Utah',
        60055: 'Vermont',
        60056: 'Virgin Islands',
        60057: 'Virginia',
        60058: 'Washington',
        60059: 'West Virginia',
        60060: 'Wisconsin',
        60061: 'Wyoming',
        60062: 'Alberta',
        60063: 'British Columbia',
        60064: 'Manitoba',
        60065: 'New Brunswick',
        60066: 'Newfoundland and Labrador',
        60067: 'Northwest Territories',
        60068: 'Nova Scotia',
        60069: 'Nunavut',
        60070: 'Ontario',
        60071: 'Prince Edward Island',
        60072: 'Quebec',
        60073: 'Saskatchewan',
        60074: 'Yukon Territory',
        60075: 'Alderney',
        60076: 'County Antrim',
        60077: 'County Armagh',
        60078: 'Avon',
        60079: 'Bedfordshire',
        60080: 'Berkshire',
        60081: 'Borders',
        60082: 'Buckinghamshire',
        60083: 'Cambridgeshire',
        60084: 'Central',
        60085: 'Cheshire',
        60086: 'Cleveland',
        60087: 'Clwyd',
        60088: 'Cornwall',
        60089: 'Cumbria',
        60090: 'Derbyshire',
        60091: 'Devon',
        60092: 'Dorset',
        60093: 'County Down',
        60094: 'Dumfries and Galloway',
        60095: 'County Durham',
        60096: 'Dyfed',
        60097: 'Essex',
        60098: 'County Fermanagh',
        60099: 'Fife',
        60100: 'Mid Glamorgan',
        60101: 'South Glamorgan',
        60102: 'West Glamorgan',
        60103: 'Gloucester',
        60104: 'Grampian',
        60105: 'Guernsey',
        60106: 'Gwent',
        60107: 'Gwynedd',
        60108: 'Hampshire',
        60109: 'Hereford and Worcester',
        60110: 'Hertfordshire',
        60111: 'Highlands',
        60112: 'Humberside',
        60113: 'Isle of Man',
        60114: 'Isle of Wight',
        60115: 'Jersey',
        60116: 'Kent',
        60117: 'Lancashire',
        60118: 'Leicestershire',
        60119: 'Lincolnshire',
        60120: 'Greater London',
        60121: 'County Londonderry',
        60122: 'Lothian',
        60123: 'Greater Manchester',
        60124: 'Merseyside',
        60125: 'Norfolk',
        60126: 'Northamptonshire',
        60127: 'Northumberland',
        60128: 'Nottinghamshire',
        60129: 'Orkney',
        60130: 'Oxfordshire',
        60131: 'Powys',
        60132: 'Shropshire',
        60133: 'Sark',
        60134: 'Shetland',
        60135: 'Somerset',
        60136: 'Staffordshire',
        60137: 'Strathclyde',
        60138: 'Suffolk',
        60139: 'Surrey',
        60140: 'East Sussex',
        60141: 'West Sussex',
        60142: 'Tayside',
        60143: 'Tyne and Wear',
        60144: 'County Tyrone',
        60145: 'Warwickshire',
        60146: 'Western Isles',
        60147: 'West Midlands',
        60148: 'Wiltshire',
        60149: 'North Yorkshire',
        60150: 'South Yorkshire',
        60151: 'West Yorkshire',
        60152: 'Australian Capital Territory',
        60153: 'New South Wales',
        60154: 'Northern Territory',
        60155: 'Queensland',
        60156: 'South Australia',
        60157: 'Tasmania',
        60158: 'Victoria',
        60159: 'Western Australia',
        60160: 'Auckland',
        60161: 'Bay of Plenty',
        60162: 'Canterbury',
        60163: 'Gisborne',
        60164: "Hawke's Bay",
        60165: 'Manawatu',
        60166: 'Marlborough',
        60167: 'Nelson',
        60168: 'Northland',
        60169: 'Otago',
        60170: 'Southland',
        60171: 'Taranaki',
        60172: 'Tasman',
        60173: 'Waikato',
        60174: 'Wellington',
        60175: 'West Coast',
        60200: 'Washington DC',
    }
    if lookup_value:
        return regions_and_states[lookup_value]
    return lookup_value

def get_eu_countries(lookup_value):
    eu_countries = {
        6108: 'France',
        61000: 'Austria',
        61001: 'Belgium',
        61002: 'Bulgaria',
        61003: 'Cyprus',
        61004: 'Czech Republic',
        61005: 'Denmark',
        61006: 'Estonia',
        61007: 'Finland',
        61009: 'Germany',
        61010: 'Greece',
        61011: 'Hungary',
        61012: 'Ireland',
        61013: 'Italy',
        61014: 'Latvia',
        61015: 'Lithuania',
        61016: 'Luxembourg',
        61017: 'Malta',
        61018: 'Netherlands',
        61019: 'Poland',
        61020: 'Portugal',
        61021: 'Romania',
        61022: 'Slovakia',
        61023: 'Slovenia',
        61024: 'Spain',
        61025: 'Sweden',
        61026: 'United Kingdom',
    }
    return eu_countries[lookup_value]

def get_trade_me_price(lookup_value):
    trade_me_price = {
        62000: 'Cost Price',
        62001: 'Start Price',
        62002: 'Reserve Price',
        62003: 'Buy Now Price',
        62004: 'Sell Price',
    }
    return trade_me_price[lookup_value]

def get_plus_or_minus(lookup_value):
    plus_or_minus = {
        63000: 'Plus',
        63001: 'Minus',
    }
    return plus_or_minus[lookup_value]

def get_trade_me_pick_up_options(lookup_value):
    trade_me_pick_up_options = {
        64000: 'No pick-up',
        64001: 'Buyer can pick-up',
        64002: 'Buyer must pick-up',
    }
    return trade_me_pick_up_options[lookup_value]

def get_feedback_type(lookup_value):
    feedback_type = {
        66000: 'Positive',
        66001: 'Neutral',
        66002: 'Negative',
    }
    return feedback_type[lookup_value]

def get_trade_me_fixed_price_offer_duration_days(lookup_value):
    trade_me_fixed_price_offer_duration_days = {
        67001: '1 day',
        67002: '3 days',
        67003: '7 days',
    }
    return trade_me_fixed_price_offer_duration_days[lookup_value]

def get_trade_me_floating_price_base_field(lookup_value):
    trade_me_floating_price_base_field = {
        68000: 'Cost Price',
        68001: 'Sell Price',
    }
    return trade_me_floating_price_base_field[lookup_value]

def get_app_user_start_page(lookup_value):
    app_user_start_page = {
        69000: 'Reporting - Dashboard',
        69001: 'Reporting - Sales Orders',
        69002: 'Sales - Orders',
        69003: 'Sales - Shipments',
        69004: 'Sales - Listings',
        69005: 'Sales - Questions',
        69006: 'Purchases - Orders',
        69007: 'Purchases - Receipts',
        69008: 'Products - Trade Me',
    }
    return app_user_start_page[lookup_value]

def get_couriers(lookup_value):
    couriers = {
        70001: 'Castle',
        70002: 'CourierPost',
        70003: 'Aramex',
        70004: 'Fliway',
        70005: 'NZ Couriers',
        70006: 'NZ Post',
        70007: 'Pace',
        70008: 'Post Haste Prepaid',
        70009: 'PBT',
        70010: 'Toll',
        70011: 'Mainfreight',
        70012: 'McDowall Freight',
        70013: 'Pass The Parcel',
        70014: 'Roadstar',
        70015: 'NOW Couriers',
        70016: 'Courier Xpress',
        70017: 'GoSweetSpot',
        70018: 'Post Haste Account',
        70019: 'DHL Express',
        70020: 'Australia Post',
        70021: 'Singapore Post',
        70023: 'e-Retail Distribution',
        70024: 'NZ Couriers Freight',
        70025: 'TIL Freight',
        70026: 'Titus Transport',
        70027: 'Parcel Express',
        70028: 'User Supplied',
        70029: 'icumulus',
        70030: 'Fedex',
        70031: 'DPD',
        70032: 'Royal Mail (UK)',
        70033: 'Brentwood Transport',
        70034: 'Ace Furniture Freight',
        70035: 'Delivered By Seller',
        70036: 'Summerland',
        70037: 'StraitNZ',
        70038: 'Sendle',
        70039: 'Competitive Couriers',
        70040: 'Express Drop Offs',
        70041: 'RajuP3',
        70042: 'Aramex Australia',
        70229: 'DHL Global Mail',
    }
    return couriers[lookup_value]

def get_unit_system(lookup_value):
    unit_system = {
        71001: 'Metric',
        71002: 'Imperial',
    }
    return unit_system[lookup_value]

def get_printed_invoice_style(lookup_value):
    printed_invoice_style = {
        72001: 'ToFitStandardEnvelope',
        72002: 'ToFitCourierSleeve',
    }
    return printed_invoice_style[lookup_value]

def get_trade_me_listing_rule_priority(lookup_value=None):
    trade_me_listing_rule_priority = {
        73001: 'High',
        73002: 'Medium',
        73003: 'Low',
    }
    if lookup_value:
        return trade_me_listing_rule_priority[lookup_value]
    return trade_me_listing_rule_priority

def get_trade_me_listing_end_day(lookup_value):
    trade_me_listing_end_day = {
        74001: 'on Mondays',
        74002: 'on Tuesdays',
        74003: 'on Wednesdays',
        74004: 'on Thursdays',
        74005: 'on Fridays',
        74006: 'on Saturdays',
        74007: 'on Sundays',
    }
    return trade_me_listing_end_day[lookup_value]

def get_trade_me_fpo_delta_type(lookup_value):
    trade_me_fpo_delta_type = {
        75000: 'percent (%)',
        75001: 'amount ($)',
    }
    return trade_me_fpo_delta_type[lookup_value]

def get_trade_me_listing_duration_type(lookup_value):
    trade_me_listing_duration_type = {
        76000: 'Fixed duration',
        76001: 'Fixed duration specific end time',
        76002: 'Specific day specific end time',
    }
    return trade_me_listing_duration_type[lookup_value]

def get_trade_me_listing_creation_type(lookup_value):
    trade_me_listing_creation_type = {
        77000: 'Autolisted',
        77001: 'Manually listed',
        77002: 'Imported',
    }
    return trade_me_listing_creation_type[lookup_value]

def get_sales_return_status(lookup_value):
    sales_return_status = {
        78001: 'Pending',
        78003: 'Completed',
        78004: 'Cancelled',
    }
    return sales_return_status[lookup_value]

def get_sales_return_status(lookup_value):
    sales_return_status = {
        78001: 'Pending',
        78003: 'Completed',
        78004: 'Cancelled',
    }
    return sales_return_status[lookup_value]

def get_auto_case_format(lookup_value):
    auto_case_format = {
        79001: 'Leave as is',
        79002: 'Change to UPPER CASE',
        79003: 'Change to lower case',
        79004: 'Change to Camel Case',
    }
    return auto_case_format[lookup_value]

def get_warehouse_type(lookup_value):
    warehouse_type = {
        80001: 'Own',
        80002: '3PL',
        80003: 'Supplier',
    }
    return warehouse_type[lookup_value]

def get_label_printer_type(lookup_value):
    label_printer_type = {
        81001: 'Dymo',
        81002: 'Zebra',
    }
    return label_printer_type[lookup_value]

def get_email_template_component_type(lookup_value):
    email_template_component_type = {
        82001: 'Message',
        82002: 'Subject',
        82003: 'Shipping message pickup',
        82004: 'Shipping message shipped',
        82005: 'Reminder message payment',
        82006: 'Reminder message address',
        82007: 'Reminder message payment and address',
        82008: 'Message Wrapper',
    }
    return email_template_component_type[lookup_value]

def get_trade_me_donation_recipient(lookup_value):
    trade_me_donation_recipient = {
        84001: 'Kiwis For kiwi',
        84002: 'Plunket',
        84003: 'St John',
        84004: 'The Christchurch Foundation',
    }
    return trade_me_donation_recipient[lookup_value]

def get_metric_key_date_groups(lookup_value):
    metric_key_date_groups = {
        8501: 'Public Holidays',
        8502: 'School Holidays',
        8503: 'Seasons',
    }
    return metric_key_date_groups[lookup_value]

def get_recommendation_group_type(lookup_value):
    recommendation_group_type = {
        8601: 'Shipping',
        8602: 'Promotional Extras',
        8603: 'Photos',
        8604: 'Listing Type',
        8605: 'Description',
    }
    return recommendation_group_type[lookup_value]

def get_recommendation_type(lookup_value):
    recommendation_type = {
        8701: 'Free Shipping',
        8702: 'Upgrade to Gallery',
        8703: 'Upgrade to Feature Combo',
        8704: 'No Photo',
        8705: 'More Photos',
        8706: 'Photo too small',
        8707: 'Better Quality Photos',
        8708: 'Description too short',
        8709: 'Description too simple',
        8710: 'Try Fixed Price Offers',
        8711: 'Try Multiple Quantity Listings',
        8712: 'Description too complex',
    }
    return recommendation_type[lookup_value]

def get_scheduled_report_type(lookup_value):
    scheduled_report_type = {
        88001: 'Sales Order Report',
        88002: 'Shipments Report',
    }
    return scheduled_report_type[lookup_value]

def get_book_a_courier_bag_sizes(lookup_value):
    book_a_courier_bag_sizes = {
        90001: 'Very small bag (25 x 13 cm max)',
        90002: 'Small bag (28 x 18 cm max)',
        90003: 'Medium bag (33 x 25 cm max)',
        90004: 'Large bag (45 x 36 cm max)',
    }
    return book_a_courier_bag_sizes[lookup_value]

def get_trade_me_regions(lookup_value):
    trade_me_regions = {
        91001: 'Northland',
        91002: 'Auckland',
        91003: 'Waikato',
        91004: 'Tauranga',
        91005: 'Rotorua - Whakatane',
        91006: 'Taupo - Tongariro',
        91007: 'Gisborne',
        91008: "Hawke's Bay",
        91009: 'Taranaki',
        91010: 'Wanganui',
        91011: 'Manawatu',
        91012: 'Wairarapa',
        91013: 'Wellington',
        91014: 'Nelson Bays',
        91015: 'Marlborough',
        91016: 'West Coast',
        91017: 'Canterbury',
        91018: 'Timaru - Oamaru',
        91019: 'Central Otago',
        91020: 'Queenstown Lakes',
        91021: 'Dunedin',
        91022: 'Southland',
    }
    return trade_me_regions[lookup_value]

def get_book_a_courier_packaging_types(lookup_value):
    book_a_courier_packaging_types = {
        92001: 'Box',
        92002: 'Bag',
    }
    return book_a_courier_packaging_types[lookup_value]

def get_book_a_courier_courier_options(lookup_value):
    book_a_courier_courier_options = {
        93001: 'Courier with best price',
        93002: 'NZ Post only',
        93003: 'Fastway only',
    }
    return book_a_courier_courier_options[lookup_value]

def get_book_a_courier_service_options(lookup_value):
    book_a_courier_service_options = {
        94001: 'Service level with best price',
        94002: 'Non-Signature',
        94003: 'Signature',
    }
    return book_a_courier_service_options[lookup_value]

def get_api_webhook_event_types(lookup_value):
    api_webhook_event_types = {
        95001: 'Product created',
        95002: 'Product updated',
        95003: 'Product inventory - warehouse stock updated',
        95004: 'Product inventory - ATS updated',
        95005: 'Sales order created',
        95006: 'Sales order updated',
        95007: 'Sales order status change',
        95008: 'Shipment updated',
        95009: 'Shipment confirmed',
        95010: 'Product deleted',
    }
    return api_webhook_event_types[lookup_value]
